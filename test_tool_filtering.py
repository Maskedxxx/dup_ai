#!/usr/bin/env python3
# test_tool_filtering.py

import pandas as pd
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))

from app.adapters.llm_client import LLMClient
from app.tools.tool_selector import SimpleToolSelector
from app.tools.keyword_search_tool import filter_risks_by_keywords


def create_test_dataframe() -> pd.DataFrame:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤.
    """
    test_data = [
        {
            'project_id': 'PROJ-001',
            'project_type': 'niokr',
            'project_name': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ò–ò —Å–∏—Å—Ç–µ–º—ã',
            'risk_text': '–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å—Ä—ã–≤—É —Å—Ä–æ–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞',
            'risk_priority': '–≤—ã—Å–æ–∫–∏–π',
            'status': '–∞–∫—Ç–∏–≤–Ω—ã–π'
        },
        {
            'project_id': 'PROJ-002', 
            'project_type': 'product_project',
            'project_name': '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            'risk_text': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–∞–≥–∞–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏ –ø–æ—Ç–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            'risk_priority': '—Å—Ä–µ–¥–Ω–∏–π',
            'status': '–∞–∫—Ç–∏–≤–Ω—ã–π'
        },
        {
            'project_id': 'PROJ-003',
            'project_type': 'manufacturing',
            'project_name': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
            'risk_text': '–ü–æ–ª–æ–º–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π',
            'risk_priority': '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
            'status': '–∞–∫—Ç–∏–≤–Ω—ã–π'
        },
        {
            'project_id': 'PROJ-004',
            'project_type': 'niokr',
            'project_name': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
            'risk_text': '–ù–µ—Ö–≤–∞—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –∑–∞–∫—É–ø–∫—É –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
            'risk_priority': '–≤—ã—Å–æ–∫–∏–π',
            'status': '–∞–∫—Ç–∏–≤–Ω—ã–π'
        },
        {
            'project_id': 'PROJ-005',
            'project_type': 'product_project',
            'project_name': '–í–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'risk_text': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞–º –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
            'risk_priority': '—Å—Ä–µ–¥–Ω–∏–π',
            'status': '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'
        },
        {
            'project_id': 'PROJ-006',
            'project_type': 'manufacturing',
            'project_name': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞',
            'risk_text': '–°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º',
            'risk_priority': '—Å—Ä–µ–¥–Ω–∏–π',
            'status': '–∞–∫—Ç–∏–≤–Ω—ã–π'
        }
    ]
    
    return pd.DataFrame(test_data)


def test_tool_filtering_interactive():
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenAI function calling.
    """
    print("üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤ —á–µ—Ä–µ–∑ OpenAI function calling")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ DataFrame...")
    df = create_test_dataframe()
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∏—Å–∫–æ–≤")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–∏—Å–∫–∏
    print("üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∏—Å–∫–∏:")
    for idx, row in df.iterrows():
        print(f"{idx+1}. [{row['project_name']}] {row['risk_text'][:80]}...")
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞...")
    try:
        llm_client = LLMClient()
        tool_selector = SimpleToolSelector(llm_client)
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    print()
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª
    while True:
        print("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
        user_input = input("> ").strip()
        
        if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        if not user_input:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            continue
        
        print()
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: '{user_input}'")
        print("-" * 40)
        
        try:
            # –®–ê–ì 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ LLM + function calling
            print("1Ô∏è‚É£ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ LLM...")
            keywords = tool_selector.extract_keywords(user_input)
            print(f"   –ò–∑–≤–ª–µ—á–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
            
            if not keywords:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
                continue
            
            # –®–ê–ì 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è DataFrame
            print("2Ô∏è‚É£ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...")
            filtered_df = filter_risks_by_keywords(df, keywords, top_n=3)
            
            # –®–ê–ì 3: –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("3Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
            
            if filtered_df.empty:
                print("   üö´ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–∏—Å–∫–æ–≤")
            else:
                print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–∏—Å–∫–æ–≤:")
                print()
                
                for idx, (_, row) in enumerate(filtered_df.iterrows(), 1):
                    relevance = row.get('keyword_relevance_score', 0.0)
                    print(f"   {idx}. [{row['project_name']}] (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.2f})")
                    print(f"      üí° {row['risk_text']}")
                    print(f"      üîñ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {row['risk_priority']} | –°—Ç–∞—Ç—É—Å: {row['status']}")
                    print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        
        print("=" * 60)
        print()


if __name__ == "__main__":
    test_tool_filtering_interactive()