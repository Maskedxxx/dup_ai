# app/tools/base_tool.py

import pandas as pd
from abc import ABC, abstractmethod
from typing import List, Dict, Any, Tuple
from app.utils.logging import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger(__name__)


class BaseTool(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç: –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ö–µ–º—É –∏ –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    
    @abstractmethod
    def get_schema(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-—Å—Ö–µ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è OpenAI function calling.
        
        :return: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ö–µ–º–æ–π.
        """
        pass
    
    @abstractmethod
    def execute(self, **kwargs) -> Tuple[pd.DataFrame, Dict[int, float]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
        
        :param kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ LLM –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                       –¢–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å 'df' (DataFrame –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏).
        :return: –ö–æ—Ä—Ç–µ–∂ (–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame, –°–ª–æ–≤–∞—Ä—å —Å –æ—Ü–µ–Ω–∫–∞–º–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏)
        """
        pass


def calculate_relevance_score(text: str, keywords: List[str], enable_detailed_logging: bool = False) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
    –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
    
    :param text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    :param keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    :param enable_detailed_logging: –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    :return: –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (0.0 - 1.0)
    """
    if not text or not keywords:
        return 0.0
    
    text_lower = str(text).lower()
    matches = 0
    matched_keywords = []
    unmatched_keywords = []
    
    for keyword in keywords:
        keyword_lower = keyword.lower().strip()
        if keyword_lower and keyword_lower in text_lower:
            matches += 1
            matched_keywords.append(keyword)
        else:
            unmatched_keywords.append(keyword)
    
    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if enable_detailed_logging and logger.isEnabledFor(20):  # INFO level
        score = matches / len(keywords) if keywords else 0.0
        text_preview = text[:100] + ("..." if len(text) > 100 else "")
        
        logger.info(" –ê–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:")
        logger.info(f"   üìù –¢–µ–∫—Å—Ç: '{text_preview}'")
        logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ ({matches}/{len(keywords)}): {matched_keywords}")
        logger.info(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {unmatched_keywords}")
        logger.info(f"   üìä –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {score:.3f}")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    return matches / len(keywords) if keywords else 0.0