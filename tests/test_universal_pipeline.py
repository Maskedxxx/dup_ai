#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º.
"""

import sys
import os
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.domain.enums import ButtonType, RiskCategory
from app.api.v1.schemas import AskRequest
from app.pipelines import get_pipeline, init_container
from app.utils.logging import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger(__name__)

def test_pipeline(button: str, question: str, risk_category: Optional[str] = None):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞.
    
    :param button: –¢–∏–ø –∫–Ω–æ–ø–∫–∏ (contractors, risks, errors, processes)
    :param question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param risk_category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è button=risks)
    """
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞")
    print("=" * 80)
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –µ–Ω—É–º—ã
        button_type = ButtonType(button.lower())
        risk_cat = RiskCategory(risk_category.lower()) if risk_category else None
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        request = AskRequest(
            question=question,
            button=button_type,
            risk_category=risk_cat
        )
        
        print("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
        print(f"   ‚Ä¢ –ö–Ω–æ–ø–∫–∞: {request.button.value}")
        print(f"   ‚Ä¢ –í–æ–ø—Ä–æ—Å: {request.question}")
        if request.risk_category:
            print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∏—Å–∫–∞: {request.risk_category.value}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
        pipeline = get_pipeline(request.button, request.risk_category)
        print(f"   ‚úÖ –ü–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω: {type(pipeline).__name__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        classifier = pipeline.classifier_service
        print(f"   ‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {classifier.get_column_name()}")
        print(f"   ‚Ä¢ –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: {classifier.get_item_type()}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        print("\n‚öôÔ∏è –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
        
        if request.button == ButtonType.RISKS:
            result = pipeline.process(request.question, risk_category=request.risk_category)
        else:
            result = pipeline.process(request.question)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(result.items)}")
        print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {result.total_found}")
        
        if hasattr(result, 'category') and result.category:
            print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result.category}")
        
        print("   ‚Ä¢ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:")
        print(f"     {result.text[:300]}{'...' if len(result.text) > 300 else ''}")
        
        if result.items:
            print("\nüéØ –ü–µ—Ä–≤—ã–µ 3 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞:")
            for i, item in enumerate(result.items[:3], 1):
                print(f"   {i}. {_format_item(item, request.button)}")
                if hasattr(item, 'relevance_score') and item.relevance_score:
                    print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {item.relevance_score:.2f}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        import traceback
        print("\nüîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
        traceback.print_exc()

def _format_item(item, button_type: ButtonType) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞."""
    if button_type == ButtonType.CONTRACTORS:
        return f"–ü–æ–¥—Ä—è–¥—á–∏–∫: {item.name} | –í–∏–¥—ã —Ä–∞–±–æ—Ç: {item.work_types}"
    elif button_type == ButtonType.RISKS:
        return f"–ü—Ä–æ–µ–∫—Ç: {item.project_name} | –†–∏—Å–∫: {item.risk_text[:100]}..."
    elif button_type == ButtonType.ERRORS:
        return f"–ü—Ä–æ–µ–∫—Ç: {item.project_name} | –û—à–∏–±–∫–∞: {item.error_description[:100]}..."
    elif button_type == ButtonType.PROCESSES:
        return f"–ü—Ä–æ—Ü–µ—Å—Å: {item.name} | –û–ø–∏—Å–∞–Ω–∏–µ: {item.description[:100]}..."
    else:
        return str(item)

def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
    print("üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∫—Ä–∏–ø—Ç–∞:")
    print("=" * 50)
    print()
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:")
    print("  ‚Ä¢ contractors  - –ü–æ–¥—Ä—è–¥—á–∏–∫–∏")
    print("  ‚Ä¢ risks        - –†–∏—Å–∫–∏")
    print("  ‚Ä¢ errors       - –û—à–∏–±–∫–∏")
    print("  ‚Ä¢ processes    - –ü—Ä–æ—Ü–µ—Å—Å—ã")
    print()
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∏—Å–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è button=risks):")
    print("  ‚Ä¢ manufacturing    - –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")
    print("  ‚Ä¢ niokr           - –ù–ò–û–ö–† –ø—Ä–æ–µ–∫—Ç—ã")
    print("  ‚Ä¢ product_project - –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")
    print()
    print("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞:")
    print("  python test_universal_pipeline.py")
    print("  > –ö–Ω–æ–ø–∫–∞: risks")
    print("  > –í–æ–ø—Ä–æ—Å: –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
    print("  > –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∏—Å–∫–∞: manufacturing")
    print()

def interactive_test():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–æ–≤")
    print("=" * 60)
    
    while True:
        try:
            # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            print("\nüìù –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            
            button = input("–ö–Ω–æ–ø–∫–∞ (contractors/risks/errors/processes): ").strip().lower()
            if not button:
                print("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
                continue
                
            if button not in ['contractors', 'risks', 'errors', 'processes']:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞. –î–æ—Å—Ç—É–ø–Ω—ã: contractors, risks, errors, processes")
                continue
            
            question = input("–í–æ–ø—Ä–æ—Å: ").strip()
            if not question:
                print("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                continue
            
            risk_category = None
            if button == 'risks':
                risk_cat_input = input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∏—Å–∫–∞ (manufacturing/niokr/product_project, –∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip().lower()
                if risk_cat_input and risk_cat_input in ['manufacturing', 'niokr', 'product_project']:
                    risk_category = risk_cat_input
                elif risk_cat_input:
                    print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã: manufacturing, niokr, product_project")
                    continue
            
            print("\n" + "="*80)
            
            # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
            test_pipeline(button, question, risk_category)
            
            # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
            print("\n" + "="*80)
            continue_test = input("\nüîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n): ").strip().lower()
            if continue_test != 'y':
                break
                
        except KeyboardInterrupt:
            print("\n\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        init_container()
        print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help', 'help']:
            show_help()
            return
        
        # –†–µ–∂–∏–º —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        try:
            button = sys.argv[1]
            question = sys.argv[2] if len(sys.argv) > 2 else "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"
            risk_category = sys.argv[3] if len(sys.argv) > 3 else None
            
            print("\n –†–µ–∂–∏–º —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:")
            test_pipeline(button, question, risk_category)
        except IndexError:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python script.py <button> <question> [risk_category]")
            show_help()
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        interactive_test()
    
    print("\nüèÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
